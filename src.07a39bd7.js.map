{"version":3,"sources":["js/dataPractic.js","index.js"],"names":["console","log","ref","start","document","querySelector","end","clockFace","Timer","onTick","inrtervalId","isActive","init","time","getTimeComponents","startTime","Date","now","setInterval","currentTime","deltaTime","clearInterval","hourse","pad","Math","floor","mins","secs","value","String","padStart","timer","updateClockFace","textContent","addEventListener","bind","stop"],"mappings":";;;AAqGC,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EArGDA,QAAQC,IAAI,6BAoCZ,IAAMC,EAAM,CACVC,MAAOC,SAASC,cAAc,gBAC9BC,IAAKF,SAASC,cAAc,eAC5BE,UAAWH,SAASC,cAAc,qBAG9BG,EAAAA,WACoB,SAAA,EAAA,GAAVC,IAAAA,EAAAA,EAAAA,OAAU,EAAA,KAAA,GACjBC,KAAAA,YAAc,KACdC,KAAAA,UAAW,EACXF,KAAAA,OAASA,EACTG,KAAAA,OAsDR,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAnDC,MAAA,WACQC,IAAAA,EAAO,KAAKC,kBAAkB,GAC/BL,KAAAA,OAAOI,KAiDf,CAAA,IAAA,QA9CC,MAAA,WAAQ,IAAA,EAAA,KACF,IAAA,KAAKF,SAAL,CAIEI,IAAAA,EAAYC,KAAKC,MAClBN,KAAAA,UAAW,EAEXD,KAAAA,YAAcQ,YAAY,WACvBC,IACAC,EADcJ,KAAKC,MACOF,EAC1BF,EAAO,EAAKC,kBAAkBM,GAEpC,EAAKX,OAAOI,IACX,QAgCN,CAAA,IAAA,OA7BC,MAAA,WACEQ,cAAc,KAAKX,aACdC,KAAAA,UAAW,EACVE,IAAAA,EAAO,KAAKC,kBAAkB,GAC/BL,KAAAA,OAAOI,KAyBf,CAAA,IAAA,oBAtBC,MAAA,SAAkBA,GAOT,MAAA,CAAES,OANM,KAAKC,IAClBC,KAAKC,MAAOZ,EAAQ,MAAyB,OAK9Ba,KAHJ,KAAKH,IAAIC,KAAKC,MAAOZ,EAAQ,KAAoB,MAGvCc,KAFV,KAAKJ,IAAIC,KAAKC,MAAOZ,EAAQ,IAAc,SAiB3D,CAAA,IAAA,MAZC,MAAA,SAAIe,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OAWpC,EA3DKtB,GAoDAuB,EAAQ,IAAIvB,EAAM,CAAEC,OAAQuB,IAKlC,SAASA,EAAwC,GAAtBV,IAAAA,EAAAA,EAAAA,OAAQI,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACvCzB,EAAIK,UAAU0B,YAAiBX,GAAAA,OAAAA,EAAUI,KAAAA,OAAAA,EAAQC,KAAAA,OAAAA,GAJnDzB,EAAIC,MAAM+B,iBAAiB,QAASH,EAAM5B,MAAMgC,KAAKJ,IACrD7B,EAAII,IAAI4B,iBAAiB,QAASH,EAAMK,KAAKD,KAAKJ;;AChGlD,aADA,QAAA,kBACA,QAAA","file":"src.07a39bd7.js","sourceRoot":"..\\src","sourcesContent":["console.log(\"****** dataPractic ******\");\r\n\r\n// const date = new Date();\r\n\r\n// console.log(date);\r\n// console.log(date.getMonth());\r\n// console.log(date.getDay());\r\n// console.log(date.getHours());\r\n// console.log(date.getMinutes());\r\n// console.log(date.getSeconds());\r\n// console.log(date.getTime());\r\n// console.dir(date);\r\n\r\n// const date_1 = new Date();\r\n\r\n// setTimeout(() => {\r\n//   const date_2 = new Date();\r\n\r\n//   // console.log(date_1);\r\n//   // console.log(date_2);\r\n\r\n//   console.log(\"new Date:\", date_2 - date_1);\r\n// }, 3000);\r\n\r\n// const date_3 = Date.now();\r\n\r\n// setTimeout(() => {\r\n//   const date_4 = Date.now();\r\n\r\n//   // console.log(date_3);\r\n//   // console.log(date_4);\r\n\r\n//   console.log(\"Date.now:\", date_4 - date_3);\r\n// }, 3000);\r\n\r\n///////////////////////////////////////////////////////////\r\nconst ref = {\r\n  start: document.querySelector(\"[data-start]\"),\r\n  end: document.querySelector(\"[data-stop]\"),\r\n  clockFace: document.querySelector(\"[data-clockFace]\"),\r\n};\r\n\r\nclass Timer {\r\n  constructor({ onTick }) {\r\n    this.inrtervalId = null;\r\n    this.isActive = false;\r\n    this.onTick = onTick;\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    const time = this.getTimeComponents(0);\r\n    this.onTick(time);\r\n  }\r\n\r\n  start() {\r\n    if (this.isActive) {\r\n      return;\r\n    }\r\n\r\n    const startTime = Date.now();\r\n    this.isActive = true;\r\n\r\n    this.inrtervalId = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const deltaTime = currentTime - startTime;\r\n      const time = this.getTimeComponents(deltaTime);\r\n\r\n      this.onTick(time);\r\n    }, 1000);\r\n  }\r\n\r\n  stop() {\r\n    clearInterval(this.inrtervalId);\r\n    this.isActive = false;\r\n    const time = this.getTimeComponents(0);\r\n    this.onTick(time);\r\n  }\r\n\r\n  getTimeComponents(time) {\r\n    const hourse = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\r\n    );\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    return { hourse, mins, secs };\r\n  }\r\n\r\n  pad(value) {\r\n    return String(value).padStart(2, 0);\r\n  }\r\n}\r\n\r\nconst timer = new Timer({ onTick: updateClockFace });\r\n\r\nref.start.addEventListener(\"click\", timer.start.bind(timer));\r\nref.end.addEventListener(\"click\", timer.stop.bind(timer));\r\n\r\nfunction updateClockFace({ hourse, mins, secs }) {\r\n  ref.clockFace.textContent = `${hourse}:${mins}:${secs}`;\r\n}\r\n","import \"./js/testing_1\";\r\nimport \"./js/dataPractic\";\r\n"]}